{"version":3,"file":"static/js/902.1068cb4b.chunk.js","mappings":"kTAKaA,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,EAAAA,KAAPD,CAAH,kFAOLE,EAAYF,EAAAA,GAAAA,IAAH,qFAMTG,GAAUH,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,yCAIPI,GAAeJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,oJASZM,GAAWN,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,6DAKRQ,GAAgBR,EAAAA,EAAAA,IAAOO,EAAAA,EAAAA,SAAPP,CAAH,6DAKbS,GAAUT,EAAAA,EAAAA,IAAOU,EAAAA,EAAPV,CAAH,2CAIPW,GAAUX,EAAAA,EAAAA,IAAOY,EAAAA,EAAPZ,CAAH,2CAIPa,GAAcb,EAAAA,EAAAA,IAAOc,EAAAA,EAAPd,CAAH,2CAkBXe,IAdYf,EAAAA,EAAAA,IAAOgB,EAAAA,GAAPhB,CAAH,8DAKGA,EAAAA,GAAAA,IAAH,0IASEA,EAAAA,GAAAA,GAAH,yF,6BCnDN,SAASiB,IACtB,MAAed,EAAQe,UAAhBC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAYjB,OACE,8BACE,SAACnB,EAAD,WACE,UAACC,EAAD,CACEgB,KAAMA,EACNG,KAAK,WACLC,SAfS,SAAAC,GACf,IAAQF,EAAmCE,EAAnCF,KAAMG,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAEjBA,IAFuCF,EAAZG,SAG7BP,GAASQ,EAAAA,EAAAA,IAAS,CAAEN,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,IAGpC,EASOG,cAAe,CACbC,UAAW,CAAC,WAAY,WAAY,QACpCC,OAAQ,MAEVC,oBAAkB,EARpB,WAUE,SAACjB,EAAD,UAAU,mBACV,SAAChB,EAAD,CACEuB,KAAK,OACLW,MAAM,OACNC,QAAQ,oCACRC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0BACTC,YAAY,IARlB,UAYE,SAAChC,EAAD,CAAUyB,QAAQ,SAACpB,EAAD,SAEpB,SAACZ,EAAD,CACEuB,KAAK,QACLW,MAAM,SACNE,MAAO,CACL,CACEI,KAAM,QACNF,QAAS,kCAEX,CACED,UAAU,EACVC,QAAS,8BAVf,UAcE,SAAC/B,EAAD,CAAUyB,QAAQ,SAACtB,EAAD,SAEpB,SAACV,EAAD,CACEuB,KAAK,WACLW,MAAM,WACNE,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAGbG,aAAW,EATb,UAWE,SAAChC,EAAD,CACEuB,QAAQ,SAAClB,EAAD,IACR4B,QAAQ,uCACRC,MAAM,kHAGV,SAAC3C,EAAD,CACEuB,KAAK,UACLW,MAAM,mBACNU,aAAc,CAAC,YACfH,aAAW,EACXL,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAGX,gBAAGO,EAAH,EAAGA,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAGC,GACX,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OACb,IAAIC,MACF,qDAJKF,QAAQG,SAOlB,EAVH,GAXJ,UAyBE,SAAC3C,EAAD,CAAeuB,QAAQ,SAAClB,EAAD,SAGzB,UAACd,EAAD,WACG,KACD,SAACK,EAAD,CAAcmC,KAAK,UAAUa,SAAS,SAAtC,SAA+C,aAE/B,aAM3B,C","sources":["pages/Register/Register.styled.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Button, Form, Input } from 'antd';\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\n\nexport const Label = styled(Form.Item)`\n  label {\n    width: 150px;\n    padding-top: 8px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding-top: 10%;\n  display: flex;\n  padding-left: 20%;\n`;\n\nexport const FormReg = styled(Form)`\n  width: 500px;\n`;\n\nexport const SubmitButton = styled(Button)`\n  width: 100px;\n  height: 40px;\n  margin-left: 30%;\n  display: block;\n  font-size: 18px;\n  background-color: #ae1abe;\n`;\n\nexport const InputReg = styled(Input)`\n  height: 40px;\n  font-size: 18px;\n`;\n\nexport const InputPassword = styled(Input.Password)`\n  height: 40px;\n  font-size: 18px;\n`;\n\nexport const RegMail = styled(MailOutlined)`\n  color: #c7c6c6;\n`;\n\nexport const RegUser = styled(UserOutlined)`\n  color: #c7c6c6;\n`;\n\nexport const RegPassWord = styled(LockOutlined)`\n  color: #c7c6c6;\n`;\n\nexport const LinkToLog = styled(Link)`\n  font-size: 18px;\n  margin: 0 4px;\n`;\n\nexport const ContLabel = styled.div`\n  font-size: 18px;\n  line-height: 1.11;\n  position: absolute;\n  top: -1%;\n  left: 50%;\n  margin-left: 60px;\n`;\n\nexport const TitleReg = styled.h2`\n  margin-left: 30%;\n  margin-bottom: 15px;\n  color: #211e93;\n`;","import {\n  Label,\n  FormReg,\n  SubmitButton,\n  InputReg,\n  InputPassword,\n  RegMail,\n  RegUser,\n  RegPassWord,\n  Container,\n  TitleReg,\n} from './Register.styled';\n\nimport { register } from 'redux/Authorization/operations';\nimport { useDispatch } from 'react-redux';\n\nexport default function Register() {\n  const [form] = FormReg.useForm();\n  const dispatch = useDispatch();\n  // const { isLoading, error } = useSelector(state => state.auth);\n\n  const onFinish = values => {\n    const { name, email, password, confirm } = values;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password })); \n      // !isLoading && !error && form.resetFields(); \n    }\n  };\n\n  return (\n    <section>\n      <Container>\n        <FormReg\n          form={form}\n          name=\"register\"\n          onFinish={onFinish}\n          initialValues={{\n            residence: ['zhejiang', 'hangzhou', 'xihu'], \n            prefix: '86',\n          }}\n          scrollToFirstError\n        >\n          <TitleReg>Register form</TitleReg>\n          <Label\n            name=\"name\"\n            label=\"Name\"\n            tooltip=\"What do you want your name to be?\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your name!',\n                whitespace: true,\n              },\n            ]}\n          >\n            <InputReg prefix={<RegUser />} />\n          </Label>\n          <Label\n            name=\"email\"\n            label=\"E-mail\"\n            rules={[\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!',\n              },\n            ]}\n          >\n            <InputReg prefix={<RegMail />} />\n          </Label>\n          <Label\n            name=\"password\"\n            label=\"Password\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ]}\n            hasFeedback\n          >\n            <InputPassword\n              prefix={<RegPassWord />}\n              pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{7,}\"\n              title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 7 or more characters\"\n            />\n          </Label>\n          <Label\n            name=\"confirm\"\n            label=\"Confirm Password\"\n            dependencies={['password']}\n            hasFeedback\n            rules={[\n              {\n                required: true,\n                message: 'Please confirm your password!',\n              },\n\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(\n                      'The two passwords that you entered do not match!'\n                    )\n                  );\n                },\n              }),\n            ]}\n          >\n            <InputPassword prefix={<RegPassWord />} />\n          </Label>\n\n          <Label>\n            {' '}\n            <SubmitButton type=\"primary\" htmlType=\"submit\">\n              Register\n            </SubmitButton>{' '}\n          </Label>\n        </FormReg>\n      </Container>\n    </section>\n  );\n}"],"names":["Label","styled","Form","Container","FormReg","SubmitButton","Button","InputReg","Input","InputPassword","RegMail","MailOutlined","RegUser","UserOutlined","RegPassWord","LockOutlined","TitleReg","Link","Register","useForm","form","dispatch","useDispatch","name","onFinish","values","email","password","confirm","register","initialValues","residence","prefix","scrollToFirstError","label","tooltip","rules","required","message","whitespace","type","hasFeedback","pattern","title","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","htmlType"],"sourceRoot":""}